#include "debugmode.h"
#include "arial_ttf.h" // Header generated by `xxd -i arial.ttf > arial_ttf.h`

DebugMode::DebugMode(): enabled(false) {
    if (!font.loadFromMemory(arial_ttf, arial_ttf_len)) {
        throw std::runtime_error("Failed to load Arial font from memory.");
    }
}

void DebugMode::toggle() {
    enabled = !enabled;
}

bool DebugMode::isEnabled() const {
    return enabled;
}

void DebugMode::renderOn(sf::RenderWindow &window) const {
    if (!enabled) return;

    const sf::Vector2u windowSize = window.getSize();

    for (size_t i = 0; i < texts.size(); ++i) {
        sf::Text text = texts.at(i);

        constexpr float lineSpaceing = 25.f;
        constexpr float topMargin = 20.f;
        constexpr float margin = 20.f;
        const float textWidth = text.getLocalBounds().width;

        text.setPosition(static_cast<float>(windowSize.x) - textWidth - margin,
                         topMargin + static_cast<float>(i)*lineSpaceing);

        window.draw(text);
    }
}

void DebugMode::update(const Car *car) {
    texts.clear();

    auto roundToThreeDecimals = [](const double value) {
        char buffer[10];
        snprintf(buffer, sizeof(buffer), "%.3f", value);
        return std::string(buffer);
    };

    addLine("Car", 23);
    addLine("Position (X/Y): " + roundToThreeDecimals(car->getX()) + " / " + roundToThreeDecimals(car->getY()), 20);
    addLine("Speed (Vx/Vy): " + roundToThreeDecimals(car->getVx()) + " / " + roundToThreeDecimals(car->getVy()), 20);
    addLine("Lacet: " + roundToThreeDecimals(car->getLacet()), 20);
}

void DebugMode::addLine(const std::string &content, const uint size = 20) {
    sf::Text text;
    text.setFont(font);
    text.setCharacterSize(size);
    text.setFillColor(sf::Color::White);
    text.setString(content);
    texts.push_back(text);
}
